### 解题思路

1. 先对两个数组分别排序
2. 定义两个数组移动的指针1，2
3. 对于nums1，指针1指向的元素如果小于且不等于nums2当前元素，则指针1++
4. 对于nums2，指针2指向的元素如果小于且不等于nums1当前元素，则指针2++
5. 如果任意指针已经超出数组范围，则返回结果Set集合到结果；
6. 如果指针1和指针2指向的数组元素相等，则加入到Set集合中

### 代码

* java

```java

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        int i=0, j=0;
        Set<Integer> res = new HashSet<>();
        int[] resarr;
        while(i<nums1.length || j<nums2.length){
            while(i<nums1.length&&j<nums2.length && nums1[i]<nums2[j] && nums1[i]!=nums2[j]) i++;
            while(i<nums1.length&&j<nums2.length && nums2[j]<nums1[i] && nums1[i]!=nums2[j]) j++;
            if(i>=nums1.length || j>=nums2.length){
                 return res.stream().mapToInt(Integer::valueOf).toArray();
            }
            if(nums1[i]==nums2[j]){
                res.add(nums1[i]);
                i++;
                j++;
            }
        }
        return res.stream().mapToInt(Integer::valueOf).toArray();
    }
}
```

