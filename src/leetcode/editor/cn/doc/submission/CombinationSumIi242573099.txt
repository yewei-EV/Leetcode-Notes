class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, new ArrayList<>(), ans);
        return ans;
    }

    public void backtrack(int[] candidates, int target, int index, List<Integer> temp,
                          List<List<Integer>> ans) {
        if (target == 0) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (i > index && candidates[i] == candidates[i-1]) continue;
            if (candidates[i] > target) {
                break;
            } else {
                temp.add(candidates[i]);
                backtrack(candidates, target-candidates[i], i+1, temp, ans);
                temp.remove(temp.size()-1);
            }
        }
    }
}

//runtime:2 ms
//memory:38.6 MB
