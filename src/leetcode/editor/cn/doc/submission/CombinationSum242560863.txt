class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        Arrays.sort(candidates);
        backtrack(candidates, target, 0, ans, new ArrayList<>());
        return ans;
    }

    public void backtrack (int[] candidates, int target, int index,
                                          List<List<Integer>> ans, List<Integer> temp) {
        if (target == 0) {
            ans.add(new ArrayList<>(temp));
            return;
        }
        for (int i = index; i < candidates.length; i++) {
            if (candidates[i] > target) {
                break;
            }
            temp.add(candidates[i]);
            backtrack(candidates, target-candidates[i], i, ans, temp);
            temp.remove(temp.size()-1);
        }
    }
}

//runtime:2 ms
//memory:38.7 MB
