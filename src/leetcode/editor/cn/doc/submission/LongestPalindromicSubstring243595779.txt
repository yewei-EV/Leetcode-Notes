class Solution {

    //DP思想
    public String longestPalindrome(String s) {
        char[] chars = s.toCharArray();
        String max = "";
        for (int i = 0; i < chars.length; ++i) {
            String temp = getLongest(s, i, i+1);
            if (temp.length() > max.length()) {
                max = temp;
            }
            temp = getLongest(s, i, i);
            if (temp.length() > max.length()) {
                max = temp;
            } else if (temp.equals("")) {
                max = s.substring(i, i+1);
            }
        }
        return max;
    }

    public String getLongest(String s, int l, int r) {
        boolean isPalindrome = false;
        while (l >= 0 && r < s.length() && s.charAt(l) == s.charAt(r)) {
            isPalindrome = true;
            --l;
            ++r;
        }
        return isPalindrome?s.substring(l+1, r):"";
    }

        //Recursion 超时
//    String ans = "";
//
//    public String longestPalindrome(String s) {
//        int[][] booleans = new int[s.length()][s.length()];
//        backtrack(s, 0, booleans);
//        return ans;
//    }
//
//    public void backtrack(String s, int index, int[][] booleans) {
//
//        for (int i = index; i < s.length(); i++) {
//            if (booleans[index][i] != -1 && (booleans[index][i] == 1 || isPalindrome(s, index, i, booleans))) {
//                if (ans.length() <= s.substring(index, i+1).length()) {
//                    ans = s.substring(index, i+1);
//                }
//            } else {
//                continue;
//            }
//            backtrack(s, index + 1, booleans);
//        }
//    }
//
//    public boolean isPalindrome(String s, int startIndex, int end, int[][] booleans) {
//        char[] chars = s.toCharArray();
//        for (int i = startIndex, j = end; i < j; i++, j--) {
//            if (chars[i] != chars[j]) {
//                booleans[startIndex][end] = -1;
//                return false;
//            }
//        }
//        booleans[startIndex][end] = 1;
//        return booleans[startIndex][end] == 1;
//    }
}

//runtime:34 ms
//memory:38.9 MB
