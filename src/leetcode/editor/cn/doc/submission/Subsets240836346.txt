class Solution {

    List<List<Integer>> result = new ArrayList<>();

    // DFS
//    public List<List<Integer>> subsets(int[] nums) {
//        List<Integer> str = new ArrayList<>();
//        dfs(nums, str, 0);
//        return result;
//    }
//
//    public void dfs(int[] nums, List<Integer> str, int index) {
//        System.out.println(str + ":" + index);
//         if (index >= nums.length) {
//            result.add(new ArrayList<>(str));
//            return;
//        }
//        dfs(nums, str, index+1);
//        str.add(nums[index]);
//        dfs(nums, str, index+1);
//        str.remove(str.size() - 1);
//    }


        public List<List<Integer>> subsets(int[] nums) {
            result.add(new ArrayList<>());
            List<Integer> str = new ArrayList<>();
            dfs(nums, str,0);
            return result;
        }

        public void dfs(int[] nums, List<Integer> str, int index) {
            for(int i = index; i < nums.length; i++) {
                str.add(nums[i]);
                result.add(new ArrayList<>(str));
                dfs(nums, str, i+1);
                str.remove(str.size()-1);
            }
        }

}

//runtime:0 ms
//memory:38.4 MB
