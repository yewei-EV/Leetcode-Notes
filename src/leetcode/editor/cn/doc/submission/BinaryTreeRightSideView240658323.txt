    public class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;
        TreeNode() {}
        TreeNode(int val) { this.val = val; }
        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }
class Solution {
//    //BFS
//    public List<Integer> rightSideView(TreeNode root) {
//        List<Integer> res = new ArrayList<>();
//        if (root == null) return new ArrayList<>();
//        Queue<TreeNode> queue = new LinkedList<>();
//        queue.offer(root);
//
//        //every level
//        while(queue.size() != 0) {
//            int size = queue.size();
//
//            for (int i = 0; i < size; i++) {
//                TreeNode cur = queue.poll();
//                if (i == size - 1) res.add(cur.val);
//                if (cur.left != null) {
//                    queue.offer(cur.left);
//                }
//                if (cur.right != null ) {
//                    queue.offer(cur.right);
//                }
//            }
//        }
//        return res;
//    }
    //DFS
    List<Integer> res = new ArrayList<>();

    public List<Integer> rightSideView(TreeNode root) {
        dfs(root, 0);
        return res;
    }

    public void dfs(TreeNode root, int depth) {
        if (root == null) {
            return;
        }
        if (depth == res.size()) {
            res.add(root.val);
        }
        dfs(root.right, depth+1);
        dfs(root.left, depth+1);
    }
}

//runtime:0 ms
//memory:37.1 MB
