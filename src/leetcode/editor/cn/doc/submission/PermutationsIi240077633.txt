class Solution {

    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        dfs(result, nums, 0);
        return  result;
    }

        public void dfs(List<List<Integer>> result, int[] nums, int index) {
            //base case
            if (index >= nums.length) {
                List<Integer> answer = new ArrayList<>();
                for (int num : nums) {
                    answer.add(num);
                }
                result.add(answer);
            }

            Set<Integer> visited = new HashSet<>();
            for (int i = index; i < nums.length; i++) {
                 if (visited.add(nums[i])) {
                     switchNums(nums, index, i);
                     dfs(result, nums, index + 1);
                     switchNums(nums, i, index);
                 }
            }
        }

        public void switchNums(int[] nums, int i1, int i2) {
            int temp = nums[i1];
            nums[i1] = nums[i2];
            nums[i2] = temp;
        }
}

//runtime:1 ms
//memory:39 MB
