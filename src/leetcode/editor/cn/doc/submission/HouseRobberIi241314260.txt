class Solution {
    public int rob(int[] nums) {
        if (nums.length <= 1) return nums[0];

        // 不加最后一个
        int[] dp1 = new int[nums.length];
        dp1[0] = nums[0];
        dp1[1] = Math.max(nums[0], nums[1]);
        for (int i = 2; i < nums.length - 1; i++) {
            dp1[i] = Math.max(nums[i] + dp1[i-2], dp1[i-1]);
        }
        System.out.println(Arrays.toString(dp1));

        // 不加第一个
        int[] dp2 = new int[nums.length];
        dp2[0] = 0;
        dp2[1] = nums[1];
        for (int j = 2; j < nums.length; j++) {
            dp2[j] = Math.max(nums[j] + dp2[j-2], dp2[j-1]);
        }
        System.out.println(Arrays.toString(dp2));
        return Math.max(dp1[nums.length-2], dp2[nums.length-1]);
    }
}

//runtime:2 ms
//memory:35.8 MB
