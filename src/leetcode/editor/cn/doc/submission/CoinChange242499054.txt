class Solution {

    // DP
    public int coinChange(int[] coins, int amount) {
        int[] dp = new int[amount+1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;

        for (int i = 0; i < coins.length; i++) {
            for (int j = coins[i]; j <= amount ; j++) {
                if (dp[j - coins[i]] != Integer.MAX_VALUE) {
                    dp[j] = Math.min(dp[j], dp[j - coins[i]] + 1);
                }
            }
        }
//        System.out.println(Arrays.toString(dp));
        return dp[amount] == Integer.MAX_VALUE ? -1: dp[amount];
    }

    // dfs
//    int min = -1;
//
//    public int coinChange(int[] coins, int amount) {
//        dp(coins, amount, 0);
//        return min;
//    }
//
//    public void dp(int[] coins, int amount, int count) {
//        if (amount < 0) return;
//        System.out.println(amount);
//        if (amount == 0) {
//            if (min == -1 || count < min) {
//                min = count;
//            }
//            return;
//        }
//        for (int coin: coins) {
//            amount = amount - coin;
//            count = count + 1;
//            dp(coins, amount, count);
//            amount = amount + coin;
//            count = count - 1;
//        }
//    }
}

//runtime:12 ms
//memory:37.7 MB
